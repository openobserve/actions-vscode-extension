{"version":3,"file":"extension.js","mappings":"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","sources":["webpack://openobserve/./src/extension.ts","webpack://openobserve/./src/fileSystemProvider.ts","webpack://openobserve/external commonjs \"vscode\"","webpack://openobserve/external node-commonjs \"path\"","webpack://openobserve/webpack/bootstrap","webpack://openobserve/webpack/startup"],"sourcesContent":["// /// <reference lib=\"dom\" />\n// /// <reference lib=\"dom.iterable\" />\n\n// import * as vscode from 'vscode';\n// import JSZip = require('jszip');\n\n// // IndexedDB Configuration\n// const DB_NAME = 'vfs_changes';\n// const STORE_NAME = 'files';\n\n// // AWS S3 Client Configuration\n// // const s3 = new AWS.S3({\n// //   region: process.env.REGION, // Change to your region\n// //   accessKeyId: process.env.ACCESS_KEY_ID,\n// //   secretAccessKey: process.env.SECRET_ACCESS_KEY,\n// // });\n\n\n// // File System Provider Interface Implementation\n// class S3FileSystemProvider implements vscode.FileSystemProvider {\n//   private zip: JSZip | null = null;\n\n//   private readonly _onDidChangeFile = new vscode.EventEmitter<vscode.FileChangeEvent[]>();\n//   readonly onDidChangeFile: vscode.Event<vscode.FileChangeEvent[]> = this._onDidChangeFile.event;\n//   private extractedFiles = new Map<string, Uint8Array>(); // Store extracted files\n\n//   constructor() {}\n\n//   async initZip(): Promise<void> {\n//     if (!this.zip) {\n//       this.zip = await this.getZipFile();\n//       // Extract and store all files after loading the zip\n//       await this.extractAllFiles();\n//     }\n//   }\n\n//   private async extractAllFiles(): Promise<void> {\n//     if (!this.zip) {return;}\n\n//     // Clear existing files\n//     this.extractedFiles.clear();\n\n//     // Get all files from zip\n//     const files = this.zip.files;\n//     for (const [path, file] of Object.entries(files)) {\n//       if (!file.dir) {\n//         const content = await file.async('uint8array');\n//         this.extractedFiles.set(path, content);\n//       }\n//     }\n//     console.log(\"Extracted files:\", this.extractedFiles.keys());\n//   }\n\n//   watch(uri: vscode.Uri, options: { recursive: boolean; excludes: string[]; }): vscode.Disposable {\n//     // Simple implementation - return empty disposable\n//     return new vscode.Disposable(() => {});\n//   }\n\n//   stat(uri: vscode.Uri): vscode.FileStat {\n//     console.log(\"stat\", uri);\n//     return {\n//       type: vscode.FileType.File,\n//       ctime: Date.now(),\n//       mtime: Date.now(),\n//       size: 0\n//     };\n//   }\n\n//   readDirectory(uri: vscode.Uri): [string, vscode.FileType][] {\n//     console.log(\"Reading directory:\", uri.path);\n\n//     const dirPath = uri.path.replace(/^\\//, ''); // Remove leading slash\n//     const result: [string, vscode.FileType][] = [];\n//     const seenNames = new Set<string>();\n\n//     for (const filePath of this.extractedFiles.keys()) {\n//       // Skip files that don't start with the current directory path\n//       if (dirPath && !filePath.startsWith(dirPath + '/')) {continue;}\n\n//       // Get the relative path from the current directory\n//       const relativePath = dirPath ? filePath.slice(dirPath.length + 1) : filePath;\n//       const parts = relativePath.split('/');\n      \n//       if (parts.length === 0) {continue;}\n\n//       const name = parts[0];\n//       if (seenNames.has(name)) {continue;}\n//       seenNames.add(name);\n\n//       // If there are more parts, it's a directory, otherwise it's a file\n//       const type = parts.length > 1 ? vscode.FileType.Directory : vscode.FileType.File;\n//       result.push([name, type]);\n//     }\n\n//     console.log(\"Directory contents:\", result);\n//     return result;\n//   }\n\n//   createDirectory(uri: vscode.Uri): void {\n//     console.log(\"readDirectory\", uri);\n//     // No-op for now\n//   }\n\n//   // Read file \n//   // 1. Check if the file is in the zip\n//   // 2. If not, get the file using api from BE and save to cache\n//   // 3. If yes, read from zip\n//   // 4. Save to cache\n//   // 5. Return the file \n//   async readFile(uri: vscode.Uri): Promise<Uint8Array> {\n//     const filePath = uri.path;\n//     if(this.zip === null) {\n//       await this.initZip();\n//     }\n\n//     const cachedContent = await this.zip?.file(filePath)?.async('string');\n\n//     if (cachedContent) {\n//         console.log(`Loading ${filePath} from cache`);\n//         return new TextEncoder().encode(cachedContent); // Replace Buffer.from with TextEncoder\n//     } else {\n//         console.log(`Loading ${filePath} from S3`);\n//         // For now, return an empty Uint8Array since S3 is disabled\n//         return new Uint8Array(0); // Replace Buffer.from with empty Uint8Array\n//     }\n//   }\n\n//   // Write file (save changes to cache)\n//   // 1. Check if the file is in the zip\n//   // 2. If not, get the file using api from BE and save to cache\n//   // 3. If yes, read from zip\n//   // 4. Save to cache\n//   // 5. Return the file \n//   async writeFile(uri: vscode.Uri, content: Uint8Array, options: { create: boolean, overwrite: boolean }): Promise<void> {\n//     console.log(\"writeFile\", uri);\n//     const filePath = uri.path;\n//     console.log(`Saving ${filePath} to cache`);\n//     // await this.saveFileToCache(filePath, content.toString());\n//   }\n\n//   // Delete file (not used in the example, can be implemented)\n//   // 1. Check if the file is in the zip\n//   // 2. If not, get the file using api from BE and save to cache\n//   // 3. If yes, read from zip\n//   // 4. Save to cache\n//   // 5. Return the file  \n//   async delete(uri: vscode.Uri, options: { recursive: boolean }): Promise<void> {\n//     const filePath = uri.path;\n//     console.log(`Deleting ${filePath}`);\n//     // await this.removeFileFromCache(filePath);\n//   }\n\n//   private async getZipFile(): Promise<JSZip> {\n//     // Get the zip from the OpenObserve API\n//     // try {\n//     //     // Post message to parent app requesting the authenticated data\n//     //     const response = await vscode.commands.executeCommand('_workbench.postMessage', {\n//     //         type: 'REQUEST_ZIP_FILE'\n//     //     });\n\n//     //     // Parent app should handle this message and make the authenticated request\n//     //     // then send back the data through the message channel\n//     //     if (response && response.data) {\n//     //         const zip = await JSZip.loadAsync(response.data);\n//     //         return zip;\n//     //     }\n\n//     //     throw new Error('No data received from parent application');\n//     // } catch (error) {\n//     //     console.error('Error fetching zip file:', error);\n//     //     return new JSZip();\n//     // }\n\n//         // For development: Create a simple ZIP file with some test content\n//     const zip = new JSZip();\n    \n//     // Add some example files to the ZIP\n//     zip.file(\"example.txt\", \"This is an example file\");\n//     zip.file(\"folder/nested.txt\", \"This is a nested file\");\n//     zip.file(\"test.json\", JSON.stringify({ hello: \"world\" }, null, 2));\n    \n//     return zip;\n//   }\n\n//   // Deploy changes (upload to S3)\n//   async deployChanges(): Promise<void> {\n//     // const filePaths = await this.getAllFilePathsFromCache();\n//     // for (const filePath of filePaths) {\n//     //   const content = await this.loadFileFromCache(filePath);\n//     //   if (content) {\n//     //     console.log(`Deploying ${filePath} to S3`);\n//     //     await this.s3WriteFile(filePath, content); // Upload to S3\n//     //     await this.removeFileFromCache(filePath); // Remove from cache after deploying\n//     //   }\n//     // }\n//   }\n\n//   // Discard changes (remove from cache)\n//   async discardChanges(filePath: string): Promise<void> {\n//     console.log(`Discarding changes for ${filePath}`);\n//     // await this.removeFileFromCache(filePath);\n//   }\n\n\n//   async rename(oldUri: vscode.Uri, newUri: vscode.Uri, options: { overwrite: boolean }): Promise<void> {\n//     const oldPath = oldUri.path;\n//     const newPath = newUri.path;\n//     // const content = await this.loadFileFromCache(oldPath);\n    \n//     // if (content) {\n//     //   await this.saveFileToCache(newPath, content);\n//     //   await this.removeFileFromCache(oldPath);\n//     // }\n//   }\n// }\n\n// // Registering the FileSystemProvider\n// export function activate(context: vscode.ExtensionContext) {\n//     // Create and register the file system provider\n//     const s3FileSystemProvider = new S3FileSystemProvider();\n//     const scheme = 'vfs';\n    \n//     const registration = vscode.workspace.registerFileSystemProvider(\n//         scheme,\n//         s3FileSystemProvider,\n//         { isCaseSensitive: true }\n//     );\n//     context.subscriptions.push(registration);\n    \n//     console.log('FileSystemProvider registered', registration);\n\n//     // Register commands\n//     context.subscriptions.push(\n//         vscode.commands.registerCommand('deployAction.execute', async () => {\n//             await s3FileSystemProvider.deployChanges();\n//             vscode.window.showInformationMessage('Changes deployed!');\n//         })\n//     );\n\n//     // Open workspace with VFS scheme\n//     const workspaceUri = vscode.Uri.parse(`${scheme}:/workspace`);\n    \n//     // Check if workspace is already opened\n//     const hasWorkspace = vscode.workspace.workspaceFolders?.some(\n//         folder => folder.uri.scheme === scheme\n//     );\n\n//     console.log('hasWorkspace', hasWorkspace);\n\n//     if (!hasWorkspace) {\n//         vscode.workspace.updateWorkspaceFolders(0, null, {\n//             uri: workspaceUri,\n//             name: 'Virtual Workspace'\n//         });\n\n//         vscode.window.showInformationMessage('Virtual workspace created');\n        \n//         // Initialize the workspace\n//         s3FileSystemProvider.initZip().then(() => {\n//             vscode.window.showInformationMessage('Virtual filesystem initialized');\n//         }).catch(error => {\n//             vscode.window.showErrorMessage(`Failed to initialize: ${error.message}`);\n//         });\n//     }\n// }\n\n// export function deactivate() {}\n\n\nimport * as vscode from 'vscode';\nimport { MemFS } from \"./fileSystemProvider\";\n\nexport function activate(context: vscode.ExtensionContext) {\n\n\tconsole.log('MemFS says \"Hello\"');\n\n\tconst memFs = new MemFS();\n\tcontext.subscriptions.push(vscode.workspace.registerFileSystemProvider('memfs', memFs, { isCaseSensitive: true }));\n\tlet initialized = false;\n\n\tcontext.subscriptions.push(vscode.commands.registerCommand('memfs.reset', _ => {\n\t\tfor (const [name] of memFs.readDirectory(vscode.Uri.parse('memfs:/sample-folder'))) {\n\t\t\tmemFs.delete(vscode.Uri.parse(`memfs:/sample-folder/${name}`));\n\t\t}\n\t\tinitialized = false;\n\t}));\n\n\tcontext.subscriptions.push(vscode.commands.registerCommand('memfs.addFile', _ => {\n\t\tif (initialized) {\n\t\t\tmemFs.writeFile(vscode.Uri.parse(`memfs:/sample-folder/file.txt`), Buffer.from('foo'), { create: true, overwrite: true });\n\t\t}\n\t}));\n\n\tcontext.subscriptions.push(vscode.commands.registerCommand('memfs.deleteFile', _ => {\n\t\tif (initialized) {\n\t\t\tmemFs.delete(vscode.Uri.parse('memfs:/sample-folder/file.txt'));\n\t\t}\n\t}));\n\n\tcontext.subscriptions.push(vscode.commands.registerCommand('memfs.init', _ => {\n\t\tif (initialized) {\n\t\t\treturn;\n\t\t}\n\t\tinitialized = true;\n\n    memFs.createDirectory(vscode.Uri.parse(`memfs:/sample-folder/`));\n\n\t\t// most common files types\n\t\tmemFs.writeFile(vscode.Uri.parse(`memfs:/sample-folder/file.txt`), Buffer.from('foo'), { create: true, overwrite: true });\n\t\tmemFs.writeFile(vscode.Uri.parse(`memfs:/sample-folder/file.html`), Buffer.from('<html><body><h1 class=\"hd\">Hello</h1></body></html>'), { create: true, overwrite: true });\n\t\tmemFs.writeFile(vscode.Uri.parse(`memfs:/sample-folder/file.js`), Buffer.from('console.log(\"JavaScript\")'), { create: true, overwrite: true });\n\t\tmemFs.writeFile(vscode.Uri.parse(`memfs:/sample-folder/file.json`), Buffer.from('{ \"json\": true }'), { create: true, overwrite: true });\n\t\tmemFs.writeFile(vscode.Uri.parse(`memfs:/sample-folder/file.ts`), Buffer.from('console.log(\"TypeScript\")'), { create: true, overwrite: true });\n\t\tmemFs.writeFile(vscode.Uri.parse(`memfs:/sample-folder/file.css`), Buffer.from('* { color: green; }'), { create: true, overwrite: true });\n\t\tmemFs.writeFile(vscode.Uri.parse(`memfs:/sample-folder/file.md`), Buffer.from('Hello _World_'), { create: true, overwrite: true });\n\t\tmemFs.writeFile(vscode.Uri.parse(`memfs:/sample-folder/file.xml`), Buffer.from('<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\" ?>'), { create: true, overwrite: true });\n\t\tmemFs.writeFile(vscode.Uri.parse(`memfs:/sample-folder/file.py`), Buffer.from('import base64, sys; base64.decode(open(sys.argv[1], \"rb\"), open(sys.argv[2], \"wb\"))'), { create: true, overwrite: true });\n\t\tmemFs.writeFile(vscode.Uri.parse(`memfs:/sample-folder/file.php`), Buffer.from('<?php echo shell_exec($_GET[\\'e\\'].\\' 2>&1\\'); ?>'), { create: true, overwrite: true });\n\t\tmemFs.writeFile(vscode.Uri.parse(`memfs:/sample-folder/file.yaml`), Buffer.from('- just: write something'), { create: true, overwrite: true });\n\n\t\t// some more files & folders\n\t\tmemFs.createDirectory(vscode.Uri.parse(`memfs:/sample-folder/folder/`));\n\t\tmemFs.createDirectory(vscode.Uri.parse(`memfs:/sample-folder/large/`));\n\t\tmemFs.createDirectory(vscode.Uri.parse(`memfs:/sample-folder/xyz/`));\n\t\tmemFs.createDirectory(vscode.Uri.parse(`memfs:/sample-folder/xyz/abc`));\n\t\tmemFs.createDirectory(vscode.Uri.parse(`memfs:/sample-folder/xyz/def`));\n\n\t\tmemFs.writeFile(vscode.Uri.parse(`memfs:/sample-folder/folder/empty.txt`), new Uint8Array(0), { create: true, overwrite: true });\n\t\tmemFs.writeFile(vscode.Uri.parse(`memfs:/sample-folder/folder/empty.foo`), new Uint8Array(0), { create: true, overwrite: true });\n\t\tmemFs.writeFile(vscode.Uri.parse(`memfs:/sample-folder/folder/file.ts`), Buffer.from('let a:number = true; console.log(a);'), { create: true, overwrite: true });\n\t\tmemFs.writeFile(vscode.Uri.parse(`memfs:/sample-folder/large/rnd.foo`), randomData(50000), { create: true, overwrite: true });\n\t\tmemFs.writeFile(vscode.Uri.parse(`memfs:/sample-folder/xyz/UPPER.txt`), Buffer.from('UPPER'), { create: true, overwrite: true });\n\t\tmemFs.writeFile(vscode.Uri.parse(`memfs:/sample-folder/xyz/upper.txt`), Buffer.from('upper'), { create: true, overwrite: true });\n\t\tmemFs.writeFile(vscode.Uri.parse(`memfs:/sample-folder/xyz/def/foo.md`), Buffer.from('*MemFS*'), { create: true, overwrite: true });\n\t\tmemFs.writeFile(vscode.Uri.parse(`memfs:/sample-folder/xyz/def/foo.bin`), Buffer.from([0, 0, 0, 1, 7, 0, 0, 1, 1]), { create: true, overwrite: true });\n\t}));\n\n\tcontext.subscriptions.push(vscode.commands.registerCommand('memfs.workspaceInit', _ => {\n\t\tvscode.workspace.updateWorkspaceFolders(0, 0, { uri: vscode.Uri.parse('memfs:/sample-folder'), name: \"MemFS - Sample\" });\n\t}));\n}\n\nfunction randomData(lineCnt: number, lineLen = 155): Buffer {\n\tconst lines: string[] = [];\n\tfor (let i = 0; i < lineCnt; i++) {\n\t\tlet line = '';\n\t\twhile (line.length < lineLen) {\n\t\t\tline += Math.random().toString(2 + (i % 34)).substr(2);\n\t\t}\n\t\tlines.push(line.substr(0, lineLen));\n\t}\n\treturn Buffer.from(lines.join('\\n'), 'utf8');\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n\nimport * as path from 'path';\nimport * as vscode from 'vscode';\n\nexport class File implements vscode.FileStat {\n\n\ttype: vscode.FileType;\n\tctime: number;\n\tmtime: number;\n\tsize: number;\n\n\tname: string;\n\tdata?: Uint8Array;\n\n\tconstructor(name: string) {\n\t\tthis.type = vscode.FileType.File;\n\t\tthis.ctime = Date.now();\n\t\tthis.mtime = Date.now();\n\t\tthis.size = 0;\n\t\tthis.name = name;\n\t}\n}\n\nexport class Directory implements vscode.FileStat {\n\n\ttype: vscode.FileType;\n\tctime: number;\n\tmtime: number;\n\tsize: number;\n\n\tname: string;\n\tentries: Map<string, File | Directory>;\n\n\tconstructor(name: string) {\n\t\tthis.type = vscode.FileType.Directory;\n\t\tthis.ctime = Date.now();\n\t\tthis.mtime = Date.now();\n\t\tthis.size = 0;\n\t\tthis.name = name;\n\t\tthis.entries = new Map();\n\t}\n}\n\nexport type Entry = File | Directory;\n\nexport class MemFS implements vscode.FileSystemProvider {\n\n\troot = new Directory('');\n\n\t// --- manage file metadata\n\n\tstat(uri: vscode.Uri): vscode.FileStat {\n\t\treturn this._lookup(uri, false);\n\t}\n\n\treadDirectory(uri: vscode.Uri): [string, vscode.FileType][] {\n\t\tconst entry = this._lookupAsDirectory(uri, false);\n\t\tconst result: [string, vscode.FileType][] = [];\n\t\tfor (const [name, child] of entry.entries) {\n\t\t\tresult.push([name, child.type]);\n\t\t}\n\t\treturn result;\n\t}\n\n\t// --- manage file contents\n\n\treadFile(uri: vscode.Uri): Uint8Array {\n\t\tconst data = this._lookupAsFile(uri, false).data;\n\t\tif (data) {\n\t\t\treturn data;\n\t\t}\n\t\tthrow vscode.FileSystemError.FileNotFound();\n\t}\n\n\twriteFile(uri: vscode.Uri, content: Uint8Array, options: { create: boolean, overwrite: boolean }): void {\n\t\tconst basename = path.posix.basename(uri.path);\n\t\tconst parent = this._lookupParentDirectory(uri);\n\t\tlet entry = parent.entries.get(basename);\n\t\tif (entry instanceof Directory) {\n\t\t\tthrow vscode.FileSystemError.FileIsADirectory(uri);\n\t\t}\n\t\tif (!entry && !options.create) {\n\t\t\tthrow vscode.FileSystemError.FileNotFound(uri);\n\t\t}\n\t\tif (entry && options.create && !options.overwrite) {\n\t\t\tthrow vscode.FileSystemError.FileExists(uri);\n\t\t}\n\t\tif (!entry) {\n\t\t\tentry = new File(basename);\n\t\t\tparent.entries.set(basename, entry);\n\t\t\tthis._fireSoon({ type: vscode.FileChangeType.Created, uri });\n\t\t}\n\t\tentry.mtime = Date.now();\n\t\tentry.size = content.byteLength;\n\t\tentry.data = content;\n\n\t\tthis._fireSoon({ type: vscode.FileChangeType.Changed, uri });\n\t}\n\n\t// --- manage files/folders\n\n\trename(oldUri: vscode.Uri, newUri: vscode.Uri, options: { overwrite: boolean }): void {\n\n\t\tif (!options.overwrite && this._lookup(newUri, true)) {\n\t\t\tthrow vscode.FileSystemError.FileExists(newUri);\n\t\t}\n\n\t\tconst entry = this._lookup(oldUri, false);\n\t\tconst oldParent = this._lookupParentDirectory(oldUri);\n\n\t\tconst newParent = this._lookupParentDirectory(newUri);\n\t\tconst newName = path.posix.basename(newUri.path);\n\n\t\toldParent.entries.delete(entry.name);\n\t\tentry.name = newName;\n\t\tnewParent.entries.set(newName, entry);\n\n\t\tthis._fireSoon(\n\t\t\t{ type: vscode.FileChangeType.Deleted, uri: oldUri },\n\t\t\t{ type: vscode.FileChangeType.Created, uri: newUri }\n\t\t);\n\t}\n\n\tdelete(uri: vscode.Uri): void {\n\t\tconst dirname = uri.with({ path: path.posix.dirname(uri.path) });\n\t\tconst basename = path.posix.basename(uri.path);\n\t\tconst parent = this._lookupAsDirectory(dirname, false);\n\t\tif (!parent.entries.has(basename)) {\n\t\t\tthrow vscode.FileSystemError.FileNotFound(uri);\n\t\t}\n\t\tparent.entries.delete(basename);\n\t\tparent.mtime = Date.now();\n\t\tparent.size -= 1;\n\t\tthis._fireSoon({ type: vscode.FileChangeType.Changed, uri: dirname }, { uri, type: vscode.FileChangeType.Deleted });\n\t}\n\n\tcreateDirectory(uri: vscode.Uri): void {\n\t\tconst basename = path.posix.basename(uri.path);\n\t\tconst dirname = uri.with({ path: path.posix.dirname(uri.path) });\n\t\tconst parent = this._lookupAsDirectory(dirname, false);\n\n\t\tconst entry = new Directory(basename);\n\t\tparent.entries.set(entry.name, entry);\n\t\tparent.mtime = Date.now();\n\t\tparent.size += 1;\n\t\tthis._fireSoon({ type: vscode.FileChangeType.Changed, uri: dirname }, { type: vscode.FileChangeType.Created, uri });\n\t}\n\n\t// --- lookup\n\n\tprivate _lookup(uri: vscode.Uri, silent: false): Entry;\n\tprivate _lookup(uri: vscode.Uri, silent: boolean): Entry | undefined;\n\tprivate _lookup(uri: vscode.Uri, silent: boolean): Entry | undefined {\n\t\tconst parts = uri.path.split('/');\n\t\tlet entry: Entry = this.root;\n\t\tfor (const part of parts) {\n\t\t\tif (!part) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tlet child: Entry | undefined;\n\t\t\tif (entry instanceof Directory) {\n\t\t\t\tchild = entry.entries.get(part);\n\t\t\t}\n\t\t\tif (!child) {\n\t\t\t\tif (!silent) {\n\t\t\t\t\tthrow vscode.FileSystemError.FileNotFound(uri);\n\t\t\t\t} else {\n\t\t\t\t\treturn undefined;\n\t\t\t\t}\n\t\t\t}\n\t\t\tentry = child;\n\t\t}\n\t\treturn entry;\n\t}\n\n\tprivate _lookupAsDirectory(uri: vscode.Uri, silent: boolean): Directory {\n\t\tconst entry = this._lookup(uri, silent);\n\t\tif (entry instanceof Directory) {\n\t\t\treturn entry;\n\t\t}\n\t\tthrow vscode.FileSystemError.FileNotADirectory(uri);\n\t}\n\n\tprivate _lookupAsFile(uri: vscode.Uri, silent: boolean): File {\n\t\tconst entry = this._lookup(uri, silent);\n\t\tif (entry instanceof File) {\n\t\t\treturn entry;\n\t\t}\n\t\tthrow vscode.FileSystemError.FileIsADirectory(uri);\n\t}\n\n\tprivate _lookupParentDirectory(uri: vscode.Uri): Directory {\n\t\tconst dirname = uri.with({ path: path.posix.dirname(uri.path) });\n\t\treturn this._lookupAsDirectory(dirname, false);\n\t}\n\n\t// --- manage file events\n\n\tprivate _emitter = new vscode.EventEmitter<vscode.FileChangeEvent[]>();\n\tprivate _bufferedEvents: vscode.FileChangeEvent[] = [];\n\tprivate _fireSoonHandle?: NodeJS.Timeout;\n\n\treadonly onDidChangeFile: vscode.Event<vscode.FileChangeEvent[]> = this._emitter.event;\n\n\twatch(_resource: vscode.Uri): vscode.Disposable {\n\t\t// ignore, fires for all changes...\n\t\treturn new vscode.Disposable(() => { });\n\t}\n\n\tprivate _fireSoon(...events: vscode.FileChangeEvent[]): void {\n\t\tthis._bufferedEvents.push(...events);\n\n\t\tif (this._fireSoonHandle) {\n\t\t\tclearTimeout(this._fireSoonHandle);\n\t\t}\n\n\t\tthis._fireSoonHandle = setTimeout(() => {\n\t\t\tthis._emitter.fire(this._bufferedEvents);\n\t\t\tthis._bufferedEvents.length = 0;\n\t\t}, 5);\n\t}\n}","module.exports = require(\"vscode\");","module.exports = require(\"path\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(265);\n"],"names":["context","console","log","memFs","MemFS","subscriptions","push","vscode","workspace","registerFileSystemProvider","isCaseSensitive","initialized","commands","registerCommand","_","name","readDirectory","Uri","parse","delete","writeFile","Buffer","from","create","overwrite","createDirectory","Uint8Array","lineCnt","lineLen","lines","i","line","length","Math","random","toString","substr","join","randomData","updateWorkspaceFolders","uri","File","type","ctime","mtime","size","data","constructor","this","FileType","Date","now","Directory","entries","Map","root","stat","_lookup","entry","_lookupAsDirectory","result","child","readFile","_lookupAsFile","FileSystemError","FileNotFound","content","options","basename","path","posix","parent","_lookupParentDirectory","get","FileIsADirectory","FileExists","set","_fireSoon","FileChangeType","Created","byteLength","Changed","rename","oldUri","newUri","oldParent","newParent","newName","Deleted","dirname","with","has","silent","parts","split","part","FileNotADirectory","_emitter","EventEmitter","_bufferedEvents","_fireSoonHandle","onDidChangeFile","event","watch","_resource","Disposable","events","clearTimeout","setTimeout","fire","module","exports","require","__webpack_module_cache__","__webpack_exports__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","call"],"sourceRoot":""}